multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 1)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 1, [0, 0, 0, 1, 1] => 1)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 2, [0, 0, 0, 1, 1] => 1)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 2, [0, 0, 0, 1, 1] => 1, [0, 0, 1, 0, 1] => 1)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 2, [0, 0, 0, 1, 1] => 2, [0, 0, 1, 0, 1] => 1)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 3, [0, 0, 0, 1, 1] => 2, [0, 0, 1, 0, 1] => 1)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 3, [0, 0, 0, 1, 1] => 2, [0, 0, 1, 0, 1] => 2)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 3, [0, 0, 0, 1, 1] => 2, [0, 0, 1, 0, 1] => 3)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 3, [0, 0, 0, 1, 1] => 3, [0, 0, 1, 0, 1] => 3)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 4, [0, 0, 0, 1, 1] => 3, [0, 0, 1, 0, 1] => 3)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 4, [0, 0, 0, 1, 1] => 4, [0, 0, 1, 0, 1] => 3)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 4, [0, 0, 0, 1, 1] => 4, [0, 0, 1, 0, 1] => 4)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 4, [0, 0, 0, 1, 1] => 4, [0, 0, 1, 0, 1] => 5)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 4, [0, 0, 0, 1, 1] => 5, [0, 0, 1, 0, 1] => 5)
multiStates = OrderedCollections.OrderedDict{Vector{Real}, Int64}([0, 0, 0, 0, 2] => 5, [0, 0, 0, 1, 1] => 5, [0, 0, 1, 0, 1] => 5)
states = [[0, 0, 0, 0, 2], [0, 0, 0, 1, 1], [0, 0, 1, 0, 1]]
prob = 0.08
[0, 0, 0, 0, 2] -> p: 0.2
[0, 0, 0, 1, 1] -> p: 0.4
[0, 0, 1, 0, 1] -> p: 0.4
