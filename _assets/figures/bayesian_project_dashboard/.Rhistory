points(idx+dx*2.1,yred[j,t],col="#348959",pch=18,cex=0.6)
} else {
lines(c(idx,idx),c(LOW,UPP),col="gray80",lwd=2)
lines(c(idx-dx,idx+dx),rep(MID,2),cex=1,col="gray10",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="gray40",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="gray40",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="gray10",pch=18,cex=0.6)
count = count+1
}
# plotCI(x=t ,y=MID ,li=LOW ,ui=UPP)
# METRIC = c(METRIC,(yred[j,t]- mean(sampled_values))^2)
# text(idx,UPP+1.3,labels = paste0("i=",j,"\nt=",t),cex=1,col="gray50")
idx = idx+1
}
legend("topleft",legend=c("true value of the missing datum")
,pch=18,col="#348959",bty="n",cex=1)
if (save_plots==TRUE) { dev.off() }
cat(count,"\n")
cat((lenght(sorted_indexes)-count)/lenght(sorted_indexes)*100,"% of success\n")
load("df wsc fits/space_rout_NA_run6e_dfweekly.Rdata")
sorted_indexes <- order(METRIC)
save_plots=F
if (save_plots==TRUE) {
pdf(file="NA_SORTED_space_pure_ETI.pdf",height = 4.5,width=9)
# pdf(file="NA_SORTED_space_xlk.pdf",height = 4.5,width=9)
}
par(mar=c(1,2,2,1))
dx = 0.1
plot(1, type = "n", xlab = "",
ylab = "", xlim = c(1, length(na_indices_t)+dx),
ylim = c(-1.5,0.7),
main="95% credible intervals (HDI) for the missing data ")
# METRIC = c()
count = 0
idx = 1
for (i in sorted_indexes){
j = na_indices_j[i]
t = na_indices_t[i]
sampled_values = rout$fitted[t,j,]
ci_hdi <- ci(sampled_values, ci=0.96, method = "HDI")
# ci_hdi <- ci(sampled_values, ci=0.96, method = "ETI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "BCI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "SPI")
UPP = ci_hdi[[3]]
MID = mean(sampled_values)
LOW = ci_hdi[[2]]
if (yred[j,t]<=max(UPP,LOW) && yred[j,t]>=min(UPP,LOW)){
lines(c(idx,idx),c(LOW,UPP),col="#FFD99F",lwd=2)
lines(c(idx-dx/2,idx+dx/2),rep(MID,2),cex=1,col="#7D1D67",pch=15,lwd=2)
# points(idx,MID,cex=1,col="#7D1D67",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="#F65A6D",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="#F65A6D",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="#348959",pch=18,cex=0.6)
} else {
lines(c(idx,idx),c(LOW,UPP),col="gray80",lwd=2)
lines(c(idx-dx,idx+dx),rep(MID,2),cex=1,col="gray10",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="gray40",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="gray40",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="gray10",pch=18,cex=0.6)
count = count+1
}
# plotCI(x=t ,y=MID ,li=LOW ,ui=UPP)
# METRIC = c(METRIC,(yred[j,t]- mean(sampled_values))^2)
# text(idx,UPP+1.3,labels = paste0("i=",j,"\nt=",t),cex=1,col="gray50")
idx = idx+1
}
legend("topleft",legend=c("true value of the missing datum")
,pch=18,col="#348959",bty="n",cex=1)
if (save_plots==TRUE) { dev.off() }
cat(count,"\n")
cat((lenght(sorted_indexes)-count)/lenght(sorted_indexes)*100,"% of success\n")
sorted_indexes <- order(METRIC)
save_plots=F
if (save_plots==TRUE) {
pdf(file="NA_SORTED_space_pure_ETI.pdf",height = 4.5,width=9)
# pdf(file="NA_SORTED_space_xlk.pdf",height = 4.5,width=9)
}
par(mar=c(1,2,2,1))
dx = 0.1
plot(1, type = "n", xlab = "",
ylab = "", xlim = c(1, length(na_indices_t)+dx),
ylim = c(-1.5,0.7),
main="95% credible intervals (HDI) for the missing data ")
# METRIC = c()
count = 0
idx = 1
for (i in sorted_indexes){
j = na_indices_j[i]
t = na_indices_t[i]
sampled_values = rout$fitted[t,j,]
# ci_hdi <- ci(sampled_values, ci=0.96, method = "HDI")
ci_hdi <- ci(sampled_values, ci=0.96, method = "ETI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "BCI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "SPI")
UPP = ci_hdi[[3]]
MID = mean(sampled_values)
LOW = ci_hdi[[2]]
if (yred[j,t]<=max(UPP,LOW) && yred[j,t]>=min(UPP,LOW)){
lines(c(idx,idx),c(LOW,UPP),col="#FFD99F",lwd=2)
lines(c(idx-dx/2,idx+dx/2),rep(MID,2),cex=1,col="#7D1D67",pch=15,lwd=2)
# points(idx,MID,cex=1,col="#7D1D67",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="#F65A6D",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="#F65A6D",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="#348959",pch=18,cex=0.6)
} else {
lines(c(idx,idx),c(LOW,UPP),col="gray80",lwd=2)
lines(c(idx-dx,idx+dx),rep(MID,2),cex=1,col="gray10",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="gray40",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="gray40",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="gray10",pch=18,cex=0.6)
count = count+1
}
# plotCI(x=t ,y=MID ,li=LOW ,ui=UPP)
# METRIC = c(METRIC,(yred[j,t]- mean(sampled_values))^2)
# text(idx,UPP+1.3,labels = paste0("i=",j,"\nt=",t),cex=1,col="gray50")
idx = idx+1
}
legend("topleft",legend=c("true value of the missing datum")
,pch=18,col="#348959",bty="n",cex=1)
if (save_plots==TRUE) { dev.off() }
cat(count,"\n")
cat((lenght(sorted_indexes)-count)/lenght(sorted_indexes)*100,"% of success\n")
sorted_indexes <- order(METRIC)
save_plots=F
if (save_plots==TRUE) {
pdf(file="NA_SORTED_space_pure_ETI.pdf",height = 4.5,width=9)
# pdf(file="NA_SORTED_space_xlk.pdf",height = 4.5,width=9)
}
par(mar=c(1,2,2,1))
dx = 0.1
plot(1, type = "n", xlab = "",
ylab = "", xlim = c(1, length(na_indices_t)+dx),
ylim = c(-1.5,0.7),
main="95% credible intervals (HDI) for the missing data ")
# METRIC = c()
count = 0
idx = 1
for (i in sorted_indexes){
j = na_indices_j[i]
t = na_indices_t[i]
sampled_values = rout$fitted[t,j,]
ci_hdi <- ci(sampled_values, ci=0.95, method = "HDI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "ETI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "BCI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "SPI")
UPP = ci_hdi[[3]]
MID = mean(sampled_values)
LOW = ci_hdi[[2]]
if (yred[j,t]<=max(UPP,LOW) && yred[j,t]>=min(UPP,LOW)){
lines(c(idx,idx),c(LOW,UPP),col="#FFD99F",lwd=2)
lines(c(idx-dx/2,idx+dx/2),rep(MID,2),cex=1,col="#7D1D67",pch=15,lwd=2)
# points(idx,MID,cex=1,col="#7D1D67",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="#F65A6D",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="#F65A6D",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="#348959",pch=18,cex=0.6)
} else {
lines(c(idx,idx),c(LOW,UPP),col="gray80",lwd=2)
lines(c(idx-dx,idx+dx),rep(MID,2),cex=1,col="gray10",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="gray40",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="gray40",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="gray10",pch=18,cex=0.6)
count = count+1
}
# plotCI(x=t ,y=MID ,li=LOW ,ui=UPP)
# METRIC = c(METRIC,(yred[j,t]- mean(sampled_values))^2)
# text(idx,UPP+1.3,labels = paste0("i=",j,"\nt=",t),cex=1,col="gray50")
idx = idx+1
}
legend("topleft",legend=c("true value of the missing datum")
,pch=18,col="#348959",bty="n",cex=1)
if (save_plots==TRUE) { dev.off() }
cat(count,"\n")
cat((lenght(sorted_indexes)-count)/lenght(sorted_indexes)*100,"% of success\n")
save_plots=F
if (save_plots==TRUE) {
pdf(file="target_only_NA_CIs.pdf",height = 4.5,width=9)
}
par(mar=c(1,2,2,1))
dx = 0.1
plot(1, type = "n", xlab = "",
ylab = "", xlim = c(1, length(na_indices_t)+dx),
ylim = c(-1.5,0.7),
main="95% credible intervals (HDI) for the missing data ")
METRIC = c()
for (i in 1:length(na_indices_j)){
j = na_indices_j[i]
t = na_indices_t[i]
sampled_values = rout$fitted[t,j,]
ci_hdi <- ci(sampled_values, ci=0.95, method = "HDI")
UPP = ci_hdi[[3]]
MID = mean(sampled_values)
LOW = ci_hdi[[2]]
lines(c(i,i),c(LOW,UPP),col="#FFD99F",lwd=2)
lines(c(i-dx,i+dx),rep(MID,2),cex=1,col="#7D1D67",pch=15,lwd=2)
lines(c(i-dx,i+dx),rep(UPP,2),cex=1,col="#F65A6D",pch=19,lwd=2)
lines(c(i-dx,i+dx),rep(LOW,2),cex=1,col="#F65A6D",pch=19,lwd=2)
# plotCI(x=t ,y=MID ,li=LOW ,ui=UPP)
points(i+dx,yred[j,t],col="#348959",pch=18)
# METRIC_here = c(METRIC,(yred[j,t]- mean(sampled_values))^2)
# METRIC_here = abs(UPP-LOW)
METRIC_here = t
METRIC = c(METRIC,
METRIC_here
)
# text(i,UPP+1.3,labels = paste0("i=",j,"\nt=",t),cex=0.9,col="gray50")
}
legend("topleft",legend=c("true value of the missing datum")
,pch=18,col="#348959",bty="n",cex=0.8)
if (save_plots==TRUE) { dev.off() }
sorted_indexes <- order(METRIC)
save_plots=F
if (save_plots==TRUE) {
pdf(file="NA_SORTED_space_pure_ETI.pdf",height = 4.5,width=9)
# pdf(file="NA_SORTED_space_xlk.pdf",height = 4.5,width=9)
}
par(mar=c(1,2,2,1))
dx = 0.1
plot(1, type = "n", xlab = "",
ylab = "", xlim = c(1, length(na_indices_t)+dx),
ylim = c(-1.5,0.7),
main="95% credible intervals (HDI) for the missing data ")
# METRIC = c()
count = 0
idx = 1
for (i in sorted_indexes){
j = na_indices_j[i]
t = na_indices_t[i]
sampled_values = rout$fitted[t,j,]
ci_hdi <- ci(sampled_values, ci=0.95, method = "HDI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "ETI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "BCI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "SPI")
UPP = ci_hdi[[3]]
MID = mean(sampled_values)
LOW = ci_hdi[[2]]
if (yred[j,t]<=max(UPP,LOW) && yred[j,t]>=min(UPP,LOW)){
lines(c(idx,idx),c(LOW,UPP),col="#FFD99F",lwd=2)
lines(c(idx-dx/2,idx+dx/2),rep(MID,2),cex=1,col="#7D1D67",pch=15,lwd=2)
# points(idx,MID,cex=1,col="#7D1D67",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="#F65A6D",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="#F65A6D",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="#348959",pch=18,cex=0.6)
} else {
lines(c(idx,idx),c(LOW,UPP),col="gray80",lwd=2)
lines(c(idx-dx,idx+dx),rep(MID,2),cex=1,col="gray10",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="gray40",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="gray40",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="gray10",pch=18,cex=0.6)
count = count+1
}
# plotCI(x=t ,y=MID ,li=LOW ,ui=UPP)
# METRIC = c(METRIC,(yred[j,t]- mean(sampled_values))^2)
# text(idx,UPP+1.3,labels = paste0("i=",j,"\nt=",t),cex=1,col="gray50")
idx = idx+1
}
legend("topleft",legend=c("true value of the missing datum")
,pch=18,col="#348959",bty="n",cex=1)
if (save_plots==TRUE) { dev.off() }
cat(count,"\n")
cat((lenght(sorted_indexes)-count)/lenght(sorted_indexes)*100,"% of success\n")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "HDI")
ci_hdi <- ci(sampled_values, ci=0.95, method = "ETI")
sorted_indexes <- order(METRIC)
save_plots=F
if (save_plots==TRUE) {
pdf(file="NA_SORTED_space_pure_ETI.pdf",height = 4.5,width=9)
# pdf(file="NA_SORTED_space_xlk.pdf",height = 4.5,width=9)
}
par(mar=c(1,2,2,1))
dx = 0.1
plot(1, type = "n", xlab = "",
ylab = "", xlim = c(1, length(na_indices_t)+dx),
ylim = c(-1.5,0.7),
main="95% credible intervals (HDI) for the missing data ")
# METRIC = c()
count = 0
idx = 1
for (i in sorted_indexes){
j = na_indices_j[i]
t = na_indices_t[i]
sampled_values = rout$fitted[t,j,]
# ci_hdi <- ci(sampled_values, ci=0.95, method = "HDI")
ci_hdi <- ci(sampled_values, ci=0.95, method = "ETI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "BCI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "SPI")
UPP = ci_hdi[[3]]
MID = mean(sampled_values)
LOW = ci_hdi[[2]]
if (yred[j,t]<=max(UPP,LOW) && yred[j,t]>=min(UPP,LOW)){
lines(c(idx,idx),c(LOW,UPP),col="#FFD99F",lwd=2)
lines(c(idx-dx/2,idx+dx/2),rep(MID,2),cex=1,col="#7D1D67",pch=15,lwd=2)
# points(idx,MID,cex=1,col="#7D1D67",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="#F65A6D",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="#F65A6D",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="#348959",pch=18,cex=0.6)
} else {
lines(c(idx,idx),c(LOW,UPP),col="gray80",lwd=2)
lines(c(idx-dx,idx+dx),rep(MID,2),cex=1,col="gray10",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="gray40",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="gray40",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="gray10",pch=18,cex=0.6)
count = count+1
}
# plotCI(x=t ,y=MID ,li=LOW ,ui=UPP)
# METRIC = c(METRIC,(yred[j,t]- mean(sampled_values))^2)
# text(idx,UPP+1.3,labels = paste0("i=",j,"\nt=",t),cex=1,col="gray50")
idx = idx+1
}
legend("topleft",legend=c("true value of the missing datum")
,pch=18,col="#348959",bty="n",cex=1)
if (save_plots==TRUE) { dev.off() }
cat(count,"\n")
cat((lenght(sorted_indexes)-count)/lenght(sorted_indexes)*100,"% of success\n")
load("Xlk/Xlk NA/space_rout_NA_Xlk_timewisecorrected.Rdata")
sorted_indexes <- order(METRIC)
save_plots=F
if (save_plots==TRUE) {
pdf(file="NA_SORTED_space_pure_ETI.pdf",height = 4.5,width=9)
# pdf(file="NA_SORTED_space_xlk.pdf",height = 4.5,width=9)
}
par(mar=c(1,2,2,1))
dx = 0.1
plot(1, type = "n", xlab = "",
ylab = "", xlim = c(1, length(na_indices_t)+dx),
ylim = c(-1.5,0.7),
main="95% credible intervals (HDI) for the missing data ")
# METRIC = c()
count = 0
idx = 1
for (i in sorted_indexes){
j = na_indices_j[i]
t = na_indices_t[i]
sampled_values = rout$fitted[t,j,]
# ci_hdi <- ci(sampled_values, ci=0.95, method = "HDI")
ci_hdi <- ci(sampled_values, ci=0.95, method = "ETI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "BCI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "SPI")
UPP = ci_hdi[[3]]
MID = mean(sampled_values)
LOW = ci_hdi[[2]]
if (yred[j,t]<=max(UPP,LOW) && yred[j,t]>=min(UPP,LOW)){
lines(c(idx,idx),c(LOW,UPP),col="#FFD99F",lwd=2)
lines(c(idx-dx/2,idx+dx/2),rep(MID,2),cex=1,col="#7D1D67",pch=15,lwd=2)
# points(idx,MID,cex=1,col="#7D1D67",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="#F65A6D",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="#F65A6D",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="#348959",pch=18,cex=0.6)
} else {
lines(c(idx,idx),c(LOW,UPP),col="gray80",lwd=2)
lines(c(idx-dx,idx+dx),rep(MID,2),cex=1,col="gray10",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="gray40",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="gray40",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="gray10",pch=18,cex=0.6)
count = count+1
}
# plotCI(x=t ,y=MID ,li=LOW ,ui=UPP)
# METRIC = c(METRIC,(yred[j,t]- mean(sampled_values))^2)
# text(idx,UPP+1.3,labels = paste0("i=",j,"\nt=",t),cex=1,col="gray50")
idx = idx+1
}
legend("topleft",legend=c("true value of the missing datum")
,pch=18,col="#348959",bty="n",cex=1)
if (save_plots==TRUE) { dev.off() }
cat(count,"\n")
cat((lenght(sorted_indexes)-count)/lenght(sorted_indexes)*100,"% of success\n")
load("df wsc fits/space_rout_NA_run6e_dfweekly.Rdata")
sorted_indexes <- order(METRIC)
save_plots=F
if (save_plots==TRUE) {
pdf(file="NA_SORTED_space_pure_ETI_timesorted.pdf",height = 4.5,width=9)
# pdf(file="NA_SORTED_space_xlk.pdf",height = 4.5,width=9)
}
par(mar=c(1,2,2,1))
dx = 0.1
plot(1, type = "n", xlab = "",
ylab = "", xlim = c(1, length(na_indices_t)+dx),
ylim = c(-1.5,0.7),
main="95% credible intervals (HDI) for the missing data ")
# METRIC = c()
count = 0
idx = 1
for (i in sorted_indexes){
j = na_indices_j[i]
t = na_indices_t[i]
sampled_values = rout$fitted[t,j,]
# ci_hdi <- ci(sampled_values, ci=0.95, method = "HDI")
ci_hdi <- ci(sampled_values, ci=0.95, method = "ETI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "BCI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "SPI")
UPP = ci_hdi[[3]]
MID = mean(sampled_values)
LOW = ci_hdi[[2]]
if (yred[j,t]<=max(UPP,LOW) && yred[j,t]>=min(UPP,LOW)){
lines(c(idx,idx),c(LOW,UPP),col="#FFD99F",lwd=2)
lines(c(idx-dx/2,idx+dx/2),rep(MID,2),cex=1,col="#7D1D67",pch=15,lwd=2)
# points(idx,MID,cex=1,col="#7D1D67",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="#F65A6D",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="#F65A6D",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="#348959",pch=18,cex=0.6)
} else {
lines(c(idx,idx),c(LOW,UPP),col="gray80",lwd=2)
lines(c(idx-dx,idx+dx),rep(MID,2),cex=1,col="gray10",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="gray40",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="gray40",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="gray10",pch=18,cex=0.6)
count = count+1
}
# plotCI(x=t ,y=MID ,li=LOW ,ui=UPP)
# METRIC = c(METRIC,(yred[j,t]- mean(sampled_values))^2)
# text(idx,UPP+1.3,labels = paste0("i=",j,"\nt=",t),cex=1,col="gray50")
idx = idx+1
}
legend("topleft",legend=c("true value of the missing datum")
,pch=18,col="#348959",bty="n",cex=1)
if (save_plots==TRUE) { dev.off() }
cat(count,"\n")
cat((lenght(sorted_indexes)-count)/lenght(sorted_indexes)*100,"% of success\n")
sorted_indexes <- order(METRIC)
save_plots=T
if (save_plots==TRUE) {
pdf(file="NA_SORTED_space_pure_ETI_timesorted.pdf",height = 4.5,width=9)
# pdf(file="NA_SORTED_space_xlk.pdf",height = 4.5,width=9)
}
par(mar=c(1,2,2,1))
dx = 0.1
plot(1, type = "n", xlab = "",
ylab = "", xlim = c(1, length(na_indices_t)+dx),
ylim = c(-1.5,0.7),
main="95% credible intervals (HDI) for the missing data ")
# METRIC = c()
count = 0
idx = 1
for (i in sorted_indexes){
j = na_indices_j[i]
t = na_indices_t[i]
sampled_values = rout$fitted[t,j,]
# ci_hdi <- ci(sampled_values, ci=0.95, method = "HDI")
ci_hdi <- ci(sampled_values, ci=0.95, method = "ETI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "BCI")
# ci_hdi <- ci(sampled_values, ci=0.95, method = "SPI")
UPP = ci_hdi[[3]]
MID = mean(sampled_values)
LOW = ci_hdi[[2]]
if (yred[j,t]<=max(UPP,LOW) && yred[j,t]>=min(UPP,LOW)){
lines(c(idx,idx),c(LOW,UPP),col="#FFD99F",lwd=2)
lines(c(idx-dx/2,idx+dx/2),rep(MID,2),cex=1,col="#7D1D67",pch=15,lwd=2)
# points(idx,MID,cex=1,col="#7D1D67",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="#F65A6D",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="#F65A6D",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="#348959",pch=18,cex=0.6)
} else {
lines(c(idx,idx),c(LOW,UPP),col="gray80",lwd=2)
lines(c(idx-dx,idx+dx),rep(MID,2),cex=1,col="gray10",pch=15,lwd=2)
# lines(c(idx-dx,idx+dx),rep(UPP,2),cex=1,col="gray40",pch=19,lwd=2)
# lines(c(idx-dx,idx+dx),rep(LOW,2),cex=1,col="gray40",pch=19,lwd=2)
points(idx+dx*2.1,yred[j,t],col="gray10",pch=18,cex=0.6)
count = count+1
}
# plotCI(x=t ,y=MID ,li=LOW ,ui=UPP)
# METRIC = c(METRIC,(yred[j,t]- mean(sampled_values))^2)
# text(idx,UPP+1.3,labels = paste0("i=",j,"\nt=",t),cex=1,col="gray50")
idx = idx+1
}
legend("topleft",legend=c("true value of the missing datum")
,pch=18,col="#348959",bty="n",cex=1)
if (save_plots==TRUE) { dev.off() }
cat(count,"\n")
cat((lenght(sorted_indexes)-count)/lenght(sorted_indexes)*100,"% of success\n")
?ci
cat(count,"\n")
install.packages("shiny")
shiny::runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
1+1
runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
?renderImage
runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
browser()
filename
pwd()
getwd()
ls()
dir()
pwd()
getwd()
runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
plot(filename)
filename
runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
sprintf("%2d",1)
sprintf("%3d",1)
sprintf("%02d",1)
sprintf("%02d",12)
sprintf("%02d",132)
sprintf("%02d",1)
runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
shiny::runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
filename
?switch
x = switch("A", A = 2, B=3)
x
x = switch("C", A = 2, B=3)
x
x = switch("B", A = 2, B=3)
x
runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
runApp('Activity/federicomor.github.io/_assets/figures/bayesian_project_dashboard')
